{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "fundset-pg-counter-module",
  "type": "registry:item",
  "title": "fundset-pg-counter-module",
  "description": "fundset-pg-counter-module",
  "registryDependencies": [
    "https://fundset.vercel.app/r/fundset-pg-settlement-layer.json",
    "https://fundset.vercel.app/r/counter-module-definition.json"
  ],
  "files": [
    {
      "path": "../web/src/_fundset/settlement-layer/modules/counter/pg/orpc.ts",
      "content": "import { os } from '@orpc/server';\nimport { z } from 'zod';\nimport { countersTable, globalCounterTable } from '../../../pg/db-schema';\nimport { desc, eq, sql } from 'drizzle-orm';\nimport { authenticatedMiddleware, dbProvider } from '../../../pg/orpc/common';\nimport { GlobalCounterIncrementEvent } from '@/_fundset/settlement-layer/modules/counter/counter';\n\nexport const getGlobalCounter = os\n  .use(dbProvider)\n  .handler(async ({ context }) => {\n    const counter = await context.db\n      .select()\n      .from(globalCounterTable)\n      .orderBy(desc(globalCounterTable.createdAt))\n      .limit(1);\n    return counter[0]?.currentGlobalValue ?? 0;\n  })\n  .callable();\n\nexport const getPersonalCounter = os\n  .use(dbProvider)\n  .input(z.object({ userId: z.string().optional() }))\n  .handler(async ({ input, context }) => {\n    if (!input.userId) {\n      return 0;\n    }\n\n    const counter = await context.db\n      .select()\n      .from(countersTable)\n      .where(eq(countersTable.userId, input.userId));\n    return counter[0]?.value ?? 0;\n  })\n  .callable();\n\nexport const incrementGlobalCounter = os\n  .use(dbProvider)\n  .input(z.number())\n  .handler(async ({ input, context }) => {\n    const currentGlobalValue = await getGlobalCounter({ context });\n    await context.db.insert(globalCounterTable).values({\n      by: input,\n      currentGlobalValue: currentGlobalValue + input,\n    });\n  });\n\nexport const incrementPersonalCounter = os\n  .$context<{ headers: Headers }>()\n  .use(authenticatedMiddleware)\n  .use(dbProvider)\n  .input(z.number())\n  .handler(async ({ input, context }) => {\n    await context.db\n      .insert(countersTable)\n      .values({ value: input, userId: context.session.user.id })\n      .onConflictDoUpdate({\n        target: [countersTable.userId],\n        set: { value: sql`${countersTable.value} + ${input}` },\n      });\n  });\n\nexport const getGlobalCounterEvents = os\n  .use(dbProvider)\n  .input(z.object({ offset: z.number().default(0), limit: z.number().default(10) }))\n  .handler(async ({ input, context }) => {\n    const events = await context.db\n      .select()\n      .from(globalCounterTable)\n      .orderBy(desc(globalCounterTable.createdAt))\n      .limit(input.limit)\n      .offset(input.offset);\n    return events.map(\n      event =>\n        ({\n          amount: event.currentGlobalValue,\n          timestamp: event.createdAt ?? new Date(),\n          by: event.by,\n          id: event.id.toString(),\n        }) as GlobalCounterIncrementEvent,\n    );\n  });\n\nexport const counterModule = {\n  globalCounter: {\n    get: getGlobalCounter,\n    increment: incrementGlobalCounter,\n    getEvents: getGlobalCounterEvents,\n  },\n  personalCounter: { get: getPersonalCounter, increment: incrementPersonalCounter },\n};\n",
      "type": "registry:file",
      "target": "~/packages/web/src/_fundset/settlement-layer/modules/counter/pg/orpc.ts"
    },
    {
      "path": "../web/src/_fundset/settlement-layer/modules/counter/pg/build.ts",
      "content": "import { CounterModule } from '@/_fundset/settlement-layer/modules/counter/counter';\nimport { oRPCQueryUtils } from '../../../pg/orpc/client';\nimport { authClient } from '@/lib/auth-client';\n\nexport const buildCounterModule = ({\n  session,\n}: {\n  session: ReturnType<typeof authClient.useSession>['data'];\n}) => {\n  return {\n    counter: {\n      isIncrementGlobalCounterReady: true,\n      incrementGlobalCounterMutationOptions: () =>\n        oRPCQueryUtils.globalCounter.increment.mutationOptions({\n          meta: {\n            invalidatesQueries: [oRPCQueryUtils.globalCounter.get.queryOptions().queryKey],\n          },\n        }),\n      globalCounterValueQueryOptions: () => oRPCQueryUtils.globalCounter.get.queryOptions(),\n\n      isIncrementPersonalCounterReady: !!session?.user.id,\n      incrementPersonalCounterMutationOptions: () =>\n        oRPCQueryUtils.personalCounter.increment.mutationOptions({\n          meta: {\n            invalidatesQueries: [\n              oRPCQueryUtils.personalCounter.get.queryOptions({\n                input: {\n                  userId: session?.user.id,\n                },\n              }).queryKey,\n            ],\n          },\n        }),\n      personalCounterValueQueryOptions: () =>\n        oRPCQueryUtils.personalCounter.get.queryOptions({\n          input: {\n            userId: session?.user.id,\n          },\n        }),\n      globalCounterIncrementEventsQueryOptions: ({ limit, offset }) =>\n        oRPCQueryUtils.globalCounter.getEvents.queryOptions({\n          input: {\n            limit,\n            offset,\n          },\n        }),\n    },\n  } satisfies CounterModule;\n};\n",
      "type": "registry:file",
      "target": "~/packages/web/src/_fundset/settlement-layer/modules/counter/pg/build.ts"
    },
    {
      "path": "../web/src/_fundset/settlement-layer/modules/counter/pg/db-schema.ts",
      "content": "import { integer, pgTable, serial, timestamp, varchar } from 'drizzle-orm/pg-core';\n\nexport const countersTable = pgTable('counters', {\n  userId: varchar({ length: 255 }).notNull().primaryKey(),\n  value: integer().notNull(),\n});\n\nexport const globalCounterTable = pgTable('global_counter', {\n  id: serial('id').primaryKey(),\n  by: integer().notNull(),\n  currentGlobalValue: integer().notNull(),\n  createdAt: timestamp().defaultNow(),\n});\n",
      "type": "registry:file",
      "target": "~/packages/web/src/_fundset/settlement-layer/modules/counter/pg/db-schema.ts"
    }
  ]
}
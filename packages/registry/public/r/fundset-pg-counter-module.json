{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "fundset-pg-counter-module",
  "type": "registry:item",
  "title": "fundset-pg-counter-module",
  "description": "fundset-pg-counter-module",
  "registryDependencies": [
    "https://fundset.vercel.app/r/fundset-pg-settlement-layer.json",
    "https://fundset.vercel.app/r/counter-module-definition.json"
  ],
  "files": [
    {
      "path": "../web/src/_fundset/settlement-layer/pg/modules/counter/orpc.ts",
      "content": "import { os } from '@orpc/server';\nimport { z } from 'zod';\nimport { countersTable, globalCounterTable } from '../../db-schema';\nimport { eq, sql } from 'drizzle-orm';\nimport { authenticatedMiddleware, dbProvider } from '../../orpc/common';\n\nexport const getGlobalCounter = os\n  .use(dbProvider)\n  .handler(async ({ context }) => {\n    const counter = await context.db.select().from(globalCounterTable).limit(1);\n    return counter[0]?.value ?? 0;\n  })\n  .callable();\n\nexport const getPersonalCounter = os\n  .use(dbProvider)\n  .input(z.object({ userId: z.string().optional() }))\n  .handler(async ({ input, context }) => {\n    if (!input.userId) {\n      return 0;\n    }\n\n    const counter = await context.db\n      .select()\n      .from(countersTable)\n      .where(eq(countersTable.userId, input.userId));\n    return counter[0]?.value ?? 0;\n  })\n  .callable();\n\nexport const incrementGlobalCounter = os\n  .use(dbProvider)\n  .input(z.number())\n  .handler(async ({ input, context }) => {\n    const counter = await context.db.select().from(globalCounterTable);\n    if (counter.length === 0) {\n      const counter = await context.db\n        .insert(globalCounterTable)\n        .values({ value: input })\n        .returning();\n      return counter[0].value;\n    }\n\n    const newCounter = await context.db\n      .update(globalCounterTable)\n      .set({ value: counter[0].value + input })\n      .returning();\n    return newCounter[0].value;\n  });\n\nexport const incrementPersonalCounter = os\n  .$context<{ headers: Headers }>()\n  .use(authenticatedMiddleware)\n  .use(dbProvider)\n  .input(z.number())\n  .handler(async ({ input, context }) => {\n    const counter = await context.db\n      .insert(countersTable)\n      .values({ value: input, userId: context.session.user.id })\n      .onConflictDoUpdate({\n        target: [countersTable.userId],\n        set: { value: sql`${countersTable.value} + ${input}` },\n      })\n      .returning();\n    return counter[0].value;\n  });\n\nexport const counterModule = {\n  globalCounter: { get: getGlobalCounter, increment: incrementGlobalCounter },\n  personalCounter: { get: getPersonalCounter, increment: incrementPersonalCounter },\n};\n",
      "type": "registry:file",
      "target": "~/packages/web/src/_fundset/settlement-layer/pg/modules/counter/orpc.ts"
    },
    {
      "path": "../web/src/_fundset/settlement-layer/pg/modules/counter/index.ts",
      "content": "import { CounterModule } from '@/_fundset/settlement-layer/modules/counter';\nimport { oRPCQueryUtils } from '../../orpc/client';\nimport { authClient } from '@/lib/auth-client';\n\nexport const buildCounterModule = ({\n  session,\n}: {\n  session: ReturnType<typeof authClient.useSession>['data'];\n}) => {\n  return {\n    isIncrementGlobalCounterReady: true,\n    incrementGlobalCounterMutationOptions: oRPCQueryUtils.globalCounter.increment.mutationOptions({\n      meta: {\n        invalidatesQuery: oRPCQueryUtils.globalCounter.get.queryOptions().queryKey,\n      },\n    }),\n    globalCounterValueQueryOptions: oRPCQueryUtils.globalCounter.get.queryOptions(),\n\n    isIncrementPersonalCounterReady: !!session?.user.id,\n    incrementPersonalCounterMutationOptions:\n      oRPCQueryUtils.personalCounter.increment.mutationOptions({\n        meta: {\n          invalidatesQuery: oRPCQueryUtils.personalCounter.get.queryOptions({\n            input: {\n              userId: session?.user.id,\n            },\n          }).queryKey,\n        },\n      }),\n    personalCounterValueQueryOptions: oRPCQueryUtils.personalCounter.get.queryOptions({\n      input: {\n        userId: session?.user.id,\n      },\n    }),\n  } satisfies CounterModule;\n};\n",
      "type": "registry:file",
      "target": "~/packages/web/src/_fundset/settlement-layer/pg/modules/counter/index.ts"
    }
  ]
}